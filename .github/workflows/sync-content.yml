name: Sync private content to public

on:
  workflow_dispatch:
    inputs:
      ops_ref:
        description: "Private repo branch/tag to sync (in content-ops)"
        required: false
        default: "main"
  schedule:
    - cron: "0 * * * *"   # 每小时

permissions:
  contents: write

# 避免定时与手动同时跑，互相覆盖
concurrency:
  group: sync-content
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PUBLIC repo (this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 保证拉的是最新 main（或你点运行时选择的分支）
      - name: Update local branch
        run: |
          set -eux
          git fetch origin
          git rev-parse --abbrev-ref HEAD
          git pull --rebase --autostash || true

      # 守卫：确保 Secrets 与输入存在
      - name: Guard: ensure secrets & inputs exist
        run: |
          set -e
          [ -n "${{ secrets.OPS_REPO }}" ]  || { echo "Missing OPS_REPO";  exit 1; }
          [ -n "${{ secrets.OPS_TOKEN }}" ] || { echo "Missing OPS_TOKEN"; exit 1; }
          echo "Using OPS_REPO=${{ secrets.OPS_REPO }}, ref=${{ github.event.inputs.ops_ref || 'main' }}"

      # 移除历史残留的子模块指针（有就清，无则跳过）
      - name: Remove stray submodule pointers (safe)
        run: |
          set -eux
          git ls-files -s | awk '$1=="160000"{print $4}' > .gitlinks || true
          if [ -s .gitlinks ]; then
            xargs -a .gitlinks -r git rm -f --cached || true
          fi
          [ -f .gitmodules ] && git rm -f .gitmodules || rm -f .gitmodules || true

      # 检出私库到 ops/
      - name: Checkout PRIVATE content repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.OPS_REPO }}     # 例如 enxpower/content-ops
          token: ${{ secrets.OPS_TOKEN }}
          ref: ${{ github.event.inputs.ops_ref || 'main' }}
          path: ops
          persist-credentials: false
          fetch-depth: 1
          submodules: false

      # 诊断：必须存在权威文件
      - name: Diagnose content paths (tree + must-have file)
        run: |
          set -eux
          echo "::group::ops tree"; ls -la ops || true; echo "::endgroup::"
          test -f ops/static/data/ads.json || { echo "NOT FOUND: ops/static/data/ads.json"; exit 2; }

      # 同步（按内容校验），并打印前后 SHA
      - name: Sync whitelisted paths (checksum & log)
        run: |
          set -eux
          sha() { test -f "$1" && (command -v sha256sum >/dev/null && sha256sum "$1" || shasum -a 256 "$1") | awk '{print $1}' || echo "missing"; }

          echo "PRIVATE ads.json SHA=$(sha ops/static/data/ads.json)"
          echo "PUBLIC  ads.json (before) SHA=$(sha static/data/ads.json)"

          mkdir -p ads downloads static/data
          rsync -av --checksum --delete \
            --include='static/data/ads.json' \
            --include='ads/***' \
            --include='downloads/***' \
            --exclude='*' \
            ops/ ./

          echo "PUBLIC  ads.json (after rsync) SHA=$(sha static/data/ads.json)"

      # 如仍不一致，直接“强制覆盖一次”（防极端时间戳/行尾差异）
      - name: Force replace ads.json if SHA mismatch
        run: |
          set -eux
          sha() { test -f "$1" && (command -v sha256sum >/dev/null && sha256sum "$1" || shasum -a 256 "$1") | awk '{print $1}' || echo "missing"; }
          S1=$(sha ops/static/data/ads.json || true)
          S2=$(sha static/data/ads.json || true)
          if [ "$S1" != "$S2" ]; then
            echo "SHA mismatch, force replacing..."
            install -D -m 0644 ops/static/data/ads.json static/data/ads.json
            echo "PUBLIC  ads.json (forced) SHA=$(sha static/data/ads.json)"
          else
            echo "SHA equals, no force replace needed."
          fi

      # 清理可能的重复 ads.json（只保留 canonical 路径）
      - name: Ensure only canonical ads.json exists
        run: |
          set -eux
          find . -type f -name 'ads.json' ! -path './static/data/ads.json' -print -delete || true

      # 提交并推送（先 rebase 防并发覆盖）
      - name: Commit & push if changed
        run: |
          set -eux
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git config user.name  "actions-user"
            git config user.email "actions@users.noreply.github.com"
            git commit -m "chore: sync private content (ads.json, ads/, downloads/)"
            git pull --rebase --autostash || true
            git push
          fi
