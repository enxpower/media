name: Sync private content to public

on:
  workflow_dispatch:
    inputs:
      content_ref:
        description: "Branch or tag in the private repo to sync"
        required: false
        default: main
  schedule:
    - cron: "0 * * * *"  # hourly

permissions:
  contents: write

# 防并发互踩（按分支隔离）
concurrency:
  group: sync-content-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      # 0) 统一一些变量（私库名支持 secrets.OPS_REPO；否则回退到 enxpower/content-ops）
      - name: Resolve variables
        id: vars
        run: |
          set -eu
          PRIV_REPO="${{ secrets.OPS_REPO }}"
          if [ -z "${PRIV_REPO}" ]; then
            PRIV_REPO="enxpower/content-ops"
          fi
          echo "PRIVATE_REPO=$PRIV_REPO" >> $GITHUB_ENV
          # 目标分支默认就是当前分支（dev-ui 或 main）
          echo "PUBLIC_BRANCH=${GITHUB_REF_NAME}" >> $GITHUB_ENV

      # 1) Checkout PUBLIC repo (this repo)
      - name: Checkout PUBLIC repo (this repo)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PUBLIC_BRANCH }}
          fetch-depth: 0

      # 1.1) 防再发生：把临时/外部源码目录加入 .gitignore
      - name: Ensure .gitignore blocks temp and external dirs
        run: |
          set -eux
          touch .gitignore
          for d in content_src _ops_src ops_src ops _content_src; do
            grep -qx "/$d/" .gitignore || echo "/$d/" >> .gitignore
          done
          git add .gitignore || true

      # 2) 清理历史遗留的 submodule 指针（可重复执行，安全）
      - name: Remove legacy submodule pointers
        run: |
          set -eux
          # 已知目录
          git rm -r --cached ops || true
          git rm -r --cached ops_src || true
          git rm -r --cached content_src || true
          rm -rf ops ops_src content_src || true
          # 泛化：扫描所有 gitlink (mode 160000)
          git ls-files -s | awk '$1==160000 {print $4}' > gitlinks.txt || true
          if [ -s gitlinks.txt ]; then
            while read -r p; do
              echo "Removing gitlink: $p"
              git rm -f --cached -r "$p" || true
              git config -f .gitmodules --remove-section "submodule.$p" || true
              rm -rf ".git/modules/$p" || true
            done < gitlinks.txt
          fi
          # 清理 .gitmodules（若已空）
          if [ -f .gitmodules ] && ! grep -q '\[submodule' .gitmodules; then
            rm -f .gitmodules || true
          fi

      # 3) 从你的私库（content-ops）取内容
      - name: Checkout PRIVATE content repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PRIVATE_REPO }}      # 优先 secrets.OPS_REPO；否则 enxpower/content-ops
          token: ${{ secrets.OPS_TOKEN }}          # 只读该私库
          ref: ${{ github.event.inputs.content_ref }}
          path: content_src
          fetch-depth: 1
          persist-credentials: false

      # 4) 可视化检查（方便确认私库里文件路径）
      - name: Show trees (debug)
        run: |
          echo "::group::public root"; ls -la; echo "::endgroup::"
          echo "::group::private root"; ls -la content_src; echo "::endgroup::"
          echo "::group::private static/data"; ls -la content_src/static/data || true; echo "::endgroup::"

      # 5) 仅镜像白名单目录/文件（更稳：父目录 include 链 + 强制覆盖一次）
      - name: Sync whitelisted paths (mirror)
        run: |
          set -eux
          mkdir -p ads downloads static/data

          # 显式包含父目录，避免被 exclude 规则误伤
          rsync -ai --delete \
            --include='/static/' \
            --include='/static/data/' \
            --include='/static/data/ads.json' \
            --include='/ads/***' \
            --include='/downloads/***' \
            --exclude='*' \
            content_src/ ./

          # 再强制覆盖一次，确保目标字节即为私库版本
          cp -f content_src/static/data/ads.json static/data/ads.json

      # （可选）原始字节 diff，便于定位差异来源（不影响通过）
      - name: Debug diff (raw bytes)
        run: |
          set -eux
          md5sum content_src/static/data/ads.json static/data/ads.json || true
          wc -c   content_src/static/data/ads.json static/data/ads.json || true
          diff -u content_src/static/data/ads.json static/data/ads.json || true

      # 5.1) 语义校验：解析并排序后比较；不一致则给出统一 diff 并失败
      - name: Verify ads.json is SEMANTICALLY identical
        shell: bash
        run: |
          set -eux
          python - <<'PY'
          import json, difflib, pathlib, sys
          src = pathlib.Path("content_src/static/data/ads.json").read_text(encoding="utf-8")
          dst = pathlib.Path("static/data/ads.json").read_text(encoding="utf-8")

          def norm(s: str) -> str:
              obj = json.loads(s)
              return json.dumps(obj, sort_keys=True, ensure_ascii=False, separators=(",", ":"))

          ns, nd = norm(src), norm(dst)
          if ns != nd:
              print("ads.json semantic mismatch. Unified diff below:")
              for line in difflib.unified_diff(ns.splitlines(), nd.splitlines(),
                                               fromfile="PRIVATE(semantic)", tofile="PUBLIC(semantic)", lineterm=""):
                  print(line)
              sys.exit(1)
          print("ads.json semantic match")
          PY

      # 6) 有变更才提交（白名单 add，避免把 content_src 等临时目录加入索引）
      - name: Commit & push if changed
        run: |
          set -eux
          git add static/data/ads.json
          git add ads || true
          git add downloads || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git config user.name "actions-user"
            git config user.email "actions@users.noreply.github.com"
            git commit -m "chore: sync content from private repo"
            git push
          fi
